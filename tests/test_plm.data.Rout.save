
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # testfile to check if the deprecated function plm.data() is correctly
> # reworked by using pdata.frame()
> # 
> # Usefull especially if future changes to pdata.frame() affect the "plm.dim"
> # object onces created by plm.data()
> 
> library(plm)
> 
> # use a data set that has index variables not in first two columns, because
> # plm.dim objects always have them in the fist two colums (id, time)
> data("Hedonic", package = "plm")
> pHed <- pdata.frame(Hedonic, index = "townid")
> plm:::pos.index(pHed) # gives position of indexes
townid   time 
    15     16 
> 
> pHed_new_plm.data <- plm.data(Hedonic, indexes = "townid")
Warning message:
use of 'plm.data' is discouraged, better use 'pdata.frame' instead 
> #pHed_old_plm.data <- plm:::plm.data_depr_orig(Hedonic, indexes = "townid")
> 
> ## if (!identical(pHed_new_plm.data, pHed_old_plm.data))
> ##   stop("plm.data stub function using pdata.frame() does not recreate ('identical()') the original plm.dim object once produced by the original plm.data() ")
> 
> ## if (!isTRUE(all.equal(pHed_new_plm.data, pHed_old_plm.data)))
> ##   stop("plm.data stub function using pdata.frame() does not recreate ('all.equal()') the original plm.dim object once produced by the original plm.data() ")
> 
> # introduce constant columns
> Hedonic_const <- Hedonic
> Hedonic_const$constantNr <- 1
> Hedonic_const$constantStr <- "constant"
> Hedonic_const <- Hedonic_const[ , c("constantNr", setdiff(names(Hedonic), c("constantNr", "constantStr")), "constantStr")]
> pHed_const_new_plm.data <- plm.data(Hedonic_const, indexes = "townid")
Warning message:
use of 'plm.data' is discouraged, better use 'pdata.frame' instead 
> #pHed_const_old_plm.data <- plm:::plm.data_depr_orig(Hedonic_const, indexes = "townid")
> #if (!isTRUE(all.equal(pHed_const_new_plm.data, pHed_const_old_plm.data)))
> #  stop("plm.data stub function using pdata.frame() does not recreate ('all.equal()') the original plm.dim object once produced by the original plm.data() ")
> 
> class(pHed_const_new_plm.data)
[1] "plm.dim"    "data.frame"
> #class(pHed_const_old_plm.data)
> names(pHed_const_new_plm.data)
 [1] "townid"      "time"        "constantNr"  "mv"          "crim"       
 [6] "zn"          "indus"       "chas"        "nox"         "rm"         
[11] "age"         "dis"         "rad"         "tax"         "ptratio"    
[16] "blacks"      "lstat"       "constantStr"
> #names(pHed_const_old_plm.data)
> lapply(pHed_const_new_plm.data, class)
$townid
[1] "factor"

$time
[1] "factor"

$constantNr
[1] "numeric"

$mv
[1] "numeric"

$crim
[1] "numeric"

$zn
[1] "numeric"

$indus
[1] "numeric"

$chas
[1] "factor"

$nox
[1] "numeric"

$rm
[1] "numeric"

$age
[1] "numeric"

$dis
[1] "numeric"

$rad
[1] "numeric"

$tax
[1] "integer"

$ptratio
[1] "numeric"

$blacks
[1] "numeric"

$lstat
[1] "numeric"

$constantStr
[1] "factor"

> #lapply(pHed_const_old_plm.data, class)
> 
> proc.time()
   user  system elapsed 
  0.444   0.033   0.464 
